"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _blockly = _interopRequireDefault(require("blockly"));

var _index = require("./index");

var _content = _interopRequireDefault(require("./initContent/content"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var TestEditor = function TestEditor() {
  var _React$useState = _react.default.useState(_content.default.INITIAL_TOOLBOX_JSON),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      toolboxConfiguration = _React$useState2[0],
      setToolboxConfiguration = _React$useState2[1];

  _react.default.useEffect(function () {
    window.setTimeout(function () {
      setToolboxConfiguration(function (prevConfig) {
        return _objectSpread(_objectSpread({}, prevConfig), {}, {
          contents: [].concat(_toConsumableArray(prevConfig.contents), [{
            kind: "category",
            name: "Dynamically added category",
            contents: [{
              kind: "block",
              type: "text"
            }, {
              kind: "block",
              blockxml: '<block type="text_print"><value name="TEXT"><shadow type="text">abc</shadow></value></block>'
            }]
          }])
        });
      });
    }, 2000);
    window.setTimeout(function () {
      setToolboxConfiguration(function (prevConfig) {
        return _objectSpread(_objectSpread({}, prevConfig), {}, {
          contents: [].concat(_toConsumableArray(prevConfig.contents.slice(0, prevConfig.contents.length - 1)), [_objectSpread(_objectSpread({}, prevConfig.contents[prevConfig.contents.length - 1]), {}, {
            contents: [{
              kind: "block",
              type: "text"
            }]
          })])
        });
      });
    }, 4000);
    window.setTimeout(function () {
      setToolboxConfiguration(function (prevConfig) {
        return _objectSpread(_objectSpread({}, prevConfig), {}, {
          contents: _toConsumableArray(prevConfig.contents.slice(0, prevConfig.contents.length - 1))
        });
      });
    }, 10000);
  }, []);

  var onWorkspaceChange = _react.default.useCallback(function (workspace) {
    workspace.registerButtonCallback("myFirstButtonPressed", function () {
      alert("button is pressed");
    });

    var newXml = _blockly.default.Xml.domToText(_blockly.default.Xml.workspaceToDom(workspace));

    document.getElementById("generated-xml").innerText = newXml;

    var code = _blockly.default.JavaScript.workspaceToCode(workspace);

    document.getElementById("code").value = code;
  }, []);

  var onXmlChange = _react.default.useCallback(function (newXml) {
    document.getElementById("generated-xml").innerText = newXml;
  }, []);

  return (
    /*#__PURE__*/
    _react.default.createElement(_index.BlocklyWorkspace, {
      toolboxConfiguration: toolboxConfiguration,
      workspaceConfiguration: {
        grid: {
          spacing: 20,
          length: 3,
          colour: "#ccc",
          snap: true
        }
      },
      initialXml: _content.default.INITIAL_XML,
      className: "fill-height",
      onWorkspaceChange: onWorkspaceChange,
      onXmlChange: onXmlChange
    })
  );
};

window.addEventListener("load", function () {
  var editor =
  /*#__PURE__*/
  _react.default.createElement(TestEditor);

  _reactDom.default.render(editor, document.getElementById("blockly"));
});